"""
BRONA - Bie≈ºƒÖce Raporty O Nabytych Autach
Aplikacja Streamlit do przeglƒÖdania danych z CEPiK
Wersja 2.3
"""
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime, timedelta
from cepik_api import CepikAPI


# Konfiguracja strony
st.set_page_config(
    page_title="BRONA - Bie≈ºƒÖce Raporty O Nabytych Autach",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Inicjalizacja API
@st.cache_resource
def init_api():
    return CepikAPI()

api = init_api()

# Tytu≈Ç aplikacji
st.title("üöó BRONA - Bie≈ºƒÖce Raporty O Nabytych Autach")
st.markdown("Wyszukiwarka i analiza danych o pojazdach zarejestrowanych w Polsce (baza CEPiK)")

# Informacja o dzia≈Çaniu API
with st.expander("‚ÑπÔ∏è Jak dzia≈Ça aplikacja?"):
    st.markdown("""
    **API CEPiK pozwala wyszukiwaƒá pojazdy wed≈Çug:**
    - ‚úÖ Wojew√≥dztwa (wymagane)
    - ‚úÖ Zakresu dat pierwszej rejestracji (wymagane)
    - ‚úÖ Marki pojazdu (opcjonalne - filtrowanie przez API)
    - ‚úÖ Modelu pojazdu (opcjonalne - filtrowanie przez API)
    
    **Po pobraniu danych mo≈ºesz dodatkowo filtrowaƒá:**
    - üîç Po roku produkcji (lokalne filtrowanie)
    - üîç Po rodzaju paliwa (w tabeli)
    
    **Wskaz√≥wki:**
    - ‚ö° U≈ºyj filtr√≥w marki/modelu przed wyszukiwaniem - API zwr√≥ci tylko pasujƒÖce pojazdy (szybciej!)
    - üìä Bez filtr√≥w pobierzesz wszystkie pojazdy z okresu (mo≈ºe byƒá ich du≈ºo)
    - ‚è±Ô∏è Pobieranie du≈ºej ilo≈õci pojazd√≥w mo≈ºe potrwaƒá do 60 sekund
    """)

# Sidebar z filtrami
st.sidebar.header("üîç Wyszukiwanie")

# Pobieranie wojew√≥dztw
with st.spinner("≈Åadowanie wojew√≥dztw..."):
    voivodeships = api.get_voivodeships()

# 1. WOJEW√ìDZTWO (wymagane)
st.sidebar.markdown("### üìç Wojew√≥dztwo *")

# Posortuj wojew√≥dztwa alfabetycznie wed≈Çug nazwy
voivodeships_sorted = sorted(voivodeships, key=lambda x: x[1])

# Stw√≥rz mapowanie nazwa -> kod dla ≈Çatwego odczytu
voiv_name_to_code = {nazwa: kod for kod, nazwa in voivodeships_sorted}

# Lista opcji - tylko nazwy, alfabetycznie
voiv_options = ["WSZYSTKIE"] + [nazwa for kod, nazwa in voivodeships_sorted]

selected_voiv = st.sidebar.selectbox(
    "Wybierz wojew√≥dztwo",
    options=voiv_options,
    index=0,  # Domy≈õlnie "WSZYSTKIE"
    help="Wybierz wojew√≥dztwo lub WSZYSTKIE"
)

# WyciƒÖgnij kod wojew√≥dztwa lub ustaw flagƒô dla wszystkich
if selected_voiv == "WSZYSTKIE":
    voiv_code = "ALL"
    voiv_codes_list = [kod for kod, nazwa in voivodeships]
else:
    voiv_code = voiv_name_to_code.get(selected_voiv)
    voiv_codes_list = None

# 2. ZAKRES DAT (wymagany)
st.sidebar.markdown("### üìÖ Zakres dat pierwszej rejestracji *")

# Inicjalizacja domy≈õlnych dat w session state
if 'date_from' not in st.session_state:
    st.session_state.date_from = (datetime.now().replace(day=1) - timedelta(days=1)).replace(day=1)
if 'date_to' not in st.session_state:
    st.session_state.date_to = datetime.now().replace(day=1) - timedelta(days=1)

# Przyciski szybkiego wyboru
col_btn1, col_btn2, col_btn3 = st.sidebar.columns(3)
with col_btn1:
    if st.button("üìÖ Poprzedni rok", use_container_width=True):
        last_year = datetime.now().year - 1
        st.session_state.date_from = datetime(last_year, 1, 1)
        st.session_state.date_to = datetime(last_year, 12, 31)
        st.rerun()

with col_btn2:
    if st.button("üìÜ Aktualny rok", use_container_width=True):
        st.session_state.date_from = datetime(datetime.now().year, 1, 1)
        st.session_state.date_to = datetime.now()
        st.rerun()

with col_btn3:
    if st.button("üìã Aktualny miesiƒÖc", use_container_width=True):
        st.session_state.date_from = datetime.now().replace(day=1)
        st.session_state.date_to = datetime.now()
        st.rerun()

col_date1, col_date2 = st.sidebar.columns(2)
with col_date1:
    date_from = st.date_input(
        "Data od",
        value=st.session_state.date_from,
        max_value=datetime.now(),
        help="Data pierwszej rejestracji od",
        key="date_from_input"
    )

with col_date2:
    date_to = st.date_input(
        "Data do",
        value=st.session_state.date_to,
        max_value=datetime.now(),
        help="Data pierwszej rejestracji do",
        key="date_to_input"
    )

# Aktualizuj session state gdy u≈ºytkownik zmieni rƒôcznie
st.session_state.date_from = date_from
st.session_state.date_to = date_to

# 3. FILTRY API (wszystkie w jednej ramce)
st.sidebar.markdown("### üöÄ Filtry wyszukiwania")
st.sidebar.caption("‚ö° Filtrowanie przez API - zwraca tylko pasujƒÖce pojazdy")

# Pobierz s≈Çowniki z API
with st.spinner("≈Åadowanie s≈Çownik√≥w..."):
    dictionaries = api.get_all_dictionaries()

with st.sidebar.expander("üîß Wszystkie filtry", expanded=True):
    # Marka - z API (dropdown je≈õli dostƒôpne)
    marki = dictionaries.get('marka', [])
    if marki and len(marki) > 0:
        brand_options = ["Wpisz markƒô...", "-- Wszystkie --"] + sorted(marki)
        brand_search = st.selectbox(
            "Marka pojazdu",
            options=brand_options,
            index=0,
            key="brand_filter"
        )
        if brand_search in ["Wpisz markƒô...", "-- Wszystkie --"]:
            brand_search = None
    else:
        brand_search = st.text_input(
            "Marka pojazdu",
            value="",
            placeholder="np. BMW, TOYOTA, AUDI",
            key="brand_filter"
        )
        brand_search = brand_search if brand_search else None
    
    # Model - text input (za du≈ºo warto≈õci dla dropdown)
    model_search = st.text_input(
        "Model pojazdu",
        value="",
        placeholder="np. X5, COROLLA, A4",
        help="Wielko≈õƒá liter nie ma znaczenia. Zostaw puste dla wszystkich modeli.",
        key="model_filter"
    )
    model_search = model_search if model_search else None
    
    # Rok produkcji
    st.markdown("**Rok produkcji:**")
    col_year1, col_year2 = st.columns(2)
    with col_year1:
        year_from = st.number_input(
            "Od roku",
            min_value=1900,
            max_value=datetime.now().year,
            value=2020,
            step=1,
            help="Rok produkcji od",
            key="year_from_filter"
        )
    with col_year2:
        year_to = st.number_input(
            "Do roku",
            min_value=1900,
            max_value=datetime.now().year,
            value=datetime.now().year,
            step=1,
            help="Rok produkcji do",
            key="year_to_filter"
        )
    
    st.markdown("---")
    st.markdown("**Dodatkowe filtry API:**")
    
    api_filters = {}
    
    # Mapowanie nazw s≈Çownik√≥w na przyjazne etykiety
    dict_labels = {
        'rodzaj-pojazdu': 'Rodzaj pojazdu',
        'rodzaj-paliwa': 'Rodzaj paliwa',
        'pochodzenie-pojazdu': 'Pochodzenie pojazdu',
        'sposob-produkcji': 'Spos√≥b produkcji'
    }
    
    # Dynamiczne tworzenie dropdown√≥w dla wszystkich dostƒôpnych s≈Çownik√≥w
    # (opr√≥cz marki, kt√≥ra jest obs≈Çu≈ºona wy≈ºej, i wojew√≥dztw)
    excluded_dicts = {'marka', 'wojewodztwa'}
    
    for dict_id, dict_values in dictionaries.items():
        if dict_id in excluded_dicts or not dict_values:
            continue
        
        # Okre≈õl etykietƒô dla dropdown
        label = dict_labels.get(dict_id, dict_id.replace('-', ' ').title())
        
        # Utw√≥rz dropdown z warto≈õciami ze s≈Çownika
        options = ["-- Wszystkie --"] + dict_values
        selected_value = st.selectbox(
            label,
            options=options,
            index=0,
            key=f"api_{dict_id}_filter"
        )
        
        # Je≈õli wybrano warto≈õƒá, dodaj do filtr√≥w API
        if selected_value != "-- Wszystkie --":
            api_filters[dict_id] = selected_value

# Backward compatibility - ju≈º nie u≈ºywane ale zostawmy dla bezpiecze≈Ñstwa
api_brand = None
api_model = None

# Opcja dodawania do istniejƒÖcych danych
st.sidebar.markdown("---")
append_mode = st.sidebar.checkbox(
    "‚ûï Dodaj do istniejƒÖcych danych",
    value=False,
    help="Zaznacz aby dodaƒá nowe wyniki do poprzednich zamiast je zastƒôpowaƒá"
)

# Przycisk wyszukiwania
search_button = st.sidebar.button("üîé Wyszukaj pojazdy", type="primary", use_container_width=True)

# Przycisk czyszczenia danych
if st.session_state.get('vehicles_data'):
    if st.sidebar.button("üóëÔ∏è Wyczy≈õƒá dane", use_container_width=True):
        st.session_state.vehicles_data = None
        st.session_state.search_params = None
        st.rerun()

st.sidebar.markdown("---")
st.sidebar.markdown(r"**\* Pola wymagane**")

# Stan aplikacji (przechowywanie danych miƒôdzy od≈õwie≈ºeniami)
if 'vehicles_data' not in st.session_state:
    st.session_state.vehicles_data = None
if 'search_params' not in st.session_state:
    st.session_state.search_params = None
if 'batch_id_counter' not in st.session_state:
    st.session_state.batch_id_counter = 0

# WYSZUKIWANIE
if search_button:
    # Walidacja
    if not voiv_code:
        st.error("‚ö†Ô∏è Wybierz wojew√≥dztwo!")
    elif not date_from or not date_to:
        st.error("‚ö†Ô∏è Wybierz zakres dat!")
    elif date_from > date_to:
        st.error("‚ö†Ô∏è Data 'od' nie mo≈ºe byƒá p√≥≈∫niejsza ni≈º data 'do'!")
    else:
        # Konwersja dat na format API (YYYYMMDD)
        date_from_str = date_from.strftime("%Y%m%d")
        date_to_str = date_to.strftime("%Y%m%d")
        
        # Je≈õli wybrano WSZYSTKIE wojew√≥dztwa
        if voiv_code == "ALL":
            st.info(f"‚è≥ Odpytywanie {len(voiv_codes_list)} wojew√≥dztw r√≥wnolegle (max 5 jednocze≈õnie)...")
            
            # Tw√≥rz placeholder dla tabeli status√≥w
            status_placeholder = st.empty()
            
            def progress_callback(statuses_dict):
                """Wy≈õwietl szczeg√≥≈ÇowƒÖ tabelƒô status√≥w dla ka≈ºdego wojew√≥dztwa"""
                # Przygotuj dane do tabeli
                status_data = []
                completed_count = 0
                rate_limited = False
                
                for code in sorted(statuses_dict.keys()):
                    s = statuses_dict[code]
                    status_data.append({
                        'Wojew√≥dztwo': s['name'],
                        'Status': s['status'],
                        'Pojazd√≥w': s['count'],
                        'Stron': s['pages'],
                        'Czas [s]': f"{s['time']:.1f}" if s['time'] > 0 else "-"
                    })
                    
                    if s['status'] == '‚úÖ Uko≈Ñczono':
                        completed_count += 1
                    elif '‚è∏Ô∏è' in s['status'] or 'Rate limit' in s['status']:
                        rate_limited = True
                
                # Wy≈õwietl tabelƒô
                with status_placeholder.container():
                    # Progress bar
                    progress = completed_count / len(statuses_dict) if statuses_dict else 0
                    st.progress(progress)
                    st.caption(f"Uko≈Ñczono: {completed_count}/{len(statuses_dict)} wojew√≥dztw")
                    
                    # Komunikat o rate limiting
                    if rate_limited:
                        st.warning("‚ö†Ô∏è **PRZEKROCZONO LIMIT ZAPYTA≈É** - Wstrzymano wszystkie zapytania na 30 sekund...")
                    
                    # Tabela status√≥w
                    df_status = pd.DataFrame(status_data)
                    st.dataframe(
                        df_status,
                        use_container_width=True,
                        hide_index=True,
                        height=400
                    )
            
            # Przygotuj dodatkowe filtry (bez marka/model, bo sƒÖ osobne parametry)
            add_filters = {k: v for k, v in api_filters.items() if k not in ['marka', 'model']}
            
            # U≈ºyj r√≥wnoleg≈Çego pobierania
            all_vehicles, errors, statuses = api.search_all_voivodeships_parallel(
                date_from=date_from_str,
                date_to=date_to_str,
                brand=api_brand or brand_search if (api_brand or brand_search) else None,
                model=api_model or model_search if (api_model or model_search) else None,
                year_from=year_from,
                year_to=year_to,
                progress_callback=progress_callback,
                additional_filters=add_filters
            )
            
            status_placeholder.empty()
            
            # Ko≈Ñcowe podsumowanie ze statystykami
            st.markdown("### üìä Podsumowanie pobierania")
            
            # Oblicz statystyki
            completed = sum(1 for s in statuses.values() if s['status'] == '‚úÖ Uko≈Ñczono')
            failed = sum(1 for s in statuses.values() if s['status'] == '‚ùå B≈ÇƒÖd')
            total_time = max([s['time'] for s in statuses.values()], default=0)
            avg_time = sum([s['time'] for s in statuses.values()]) / len(statuses) if statuses else 0
            total_fetched = sum([s['count'] for s in statuses.values()])
            
            # Metryki
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Uko≈Ñczono", f"{completed}/{len(statuses)}", 
                         delta=f"{(completed/len(statuses)*100):.0f}%" if statuses else "0%")
            with col2:
                st.metric("Pojazd√≥w", total_fetched, delta="deduplikowanych" if len(all_vehicles) < total_fetched else "")
            with col3:
                st.metric("Ca≈Çkowity czas", f"{total_time:.1f}s")
            with col4:
                st.metric("≈öredni czas/woj", f"{avg_time:.1f}s")
            
            # Szczeg√≥≈Çowe statystyki w expander
            with st.expander("üìã Szczeg√≥≈Çowe statystyki wojew√≥dztw"):
                status_data = []
                for code in sorted(statuses.keys()):
                    s = statuses[code]
                    status_data.append({
                        'Wojew√≥dztwo': s['name'],
                        'Status': s['status'],
                        'Pojazd√≥w': s['count'],
                        'Stron': s['pages'],
                        'Czas [s]': f"{s['time']:.1f}",
                        'B≈ÇƒÖd': s['error'] if s['error'] else '-'
                    })
                
                df_final = pd.DataFrame(status_data)
                st.dataframe(df_final, use_container_width=True, hide_index=True)
            
            # Ostrze≈ºenia/b≈Çƒôdy
            if errors:
                with st.expander("‚ö†Ô∏è B≈Çƒôdy podczas pobierania", expanded=failed > 0):
                    for error in errors:
                        st.error(error)
            
            if all_vehicles:
                # Przypisz batch_id dla ≈õledzenia ≈∫r√≥d≈Ça danych (dla wykres√≥w z r√≥≈ºnymi kolorami)
                st.session_state.batch_id_counter += 1
                current_batch_id = st.session_state.batch_id_counter
                
                # Dodaj batch_id do ka≈ºdego pojazdu
                for vehicle in all_vehicles:
                    vehicle['_batch_id'] = current_batch_id
                
                results = {
                    'data': all_vehicles,
                    'meta': {'total': len(all_vehicles)}
                }
                
                # Append mode - dodaj do istniejƒÖcych
                if append_mode and st.session_state.vehicles_data:
                    existing_data = st.session_state.vehicles_data['data']
                    combined_data = existing_data + all_vehicles
                    results = {
                        'data': combined_data,
                        'meta': {'total': len(combined_data)}
                    }
                    msg = f"‚ûï Dodano {len(all_vehicles)} nowych pojazd√≥w (Batch #{current_batch_id}). ≈ÅƒÖcznie: {len(combined_data)} pojazd√≥w"
                else:
                    msg = f"‚úÖ Znaleziono {len(all_vehicles)} pojazd√≥w ze wszystkich wojew√≥dztw (Batch #{current_batch_id})"
                
                st.session_state.vehicles_data = results
                st.session_state.search_params = {
                    'voiv': 'WSZYSTKIE WOJEW√ìDZTWA',
                    'date_from': date_from,
                    'date_to': date_to,
                    'brand': brand_search,
                    'model': model_search
                }
                
                if brand_search:
                    msg += f" marki {brand_search}"
                if model_search:
                    msg += f" model {model_search}"
                st.success(msg + "!")
            else:
                st.error("‚ùå Nie znaleziono ≈ºadnych pojazd√≥w we wszystkich wojew√≥dztwach")
        
        else:
            # Pojedyncze wojew√≥dztwo z progress bar
            search_msg = f"Wyszukiwanie w {selected_voiv.split(' - ')[1]}"
            if brand_search:
                search_msg += f" | Marka: {brand_search}"
            if model_search:
                search_msg += f" | Model: {model_search}"
            
            st.info(f"‚è≥ {search_msg}...")
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            def progress_callback(page, total, fetched):
                if total > 0:
                    progress = min(fetched / total, 1.0)
                    status_text.text(f"Pobrano: {fetched}/{total} pojazd√≥w (strona {page})")
                    progress_bar.progress(progress)
            
            # U≈ºyj API filters je≈õli sƒÖ w≈ÇƒÖczone, w przeciwnym razie u≈ºyj brand_search/model_search
            final_brand = api_brand if api_brand else (brand_search if brand_search else None)
            final_model = api_model if api_model else (model_search if model_search else None)
            
            # Przygotuj dodatkowe filtry (bez marka/model, bo sƒÖ osobne parametry)
            add_filters = {k: v for k, v in api_filters.items() if k not in ['marka', 'model']}
            
            results = api.search_vehicles(
                voivodeship_code=voiv_code,
                date_from=date_from_str,
                date_to=date_to_str,
                brand=final_brand,
                model=final_model,
                year_from=year_from,
                year_to=year_to,
                retry=True,
                additional_filters=add_filters,
                progress_callback=progress_callback
            )
            
            progress_bar.empty()
            status_text.empty()
            
            if 'error' in results:
                st.error(f"‚ùå {results['error']}")
            elif 'data' in results:
                # Przypisz batch_id dla ≈õledzenia ≈∫r√≥d≈Ça danych
                st.session_state.batch_id_counter += 1
                current_batch_id = st.session_state.batch_id_counter
                
                # Dodaj batch_id do ka≈ºdego pojazdu
                for vehicle in results['data']:
                    vehicle['_batch_id'] = current_batch_id
                
                # Append mode - dodaj do istniejƒÖcych
                if append_mode and st.session_state.vehicles_data:
                    existing_data = st.session_state.vehicles_data['data']
                    combined_data = existing_data + results['data']
                    results = {
                        'data': combined_data,
                        'meta': results.get('meta', {})
                    }
                    msg = f"‚ûï Dodano {len(results['data'])} nowych pojazd√≥w (Batch #{current_batch_id}). ≈ÅƒÖcznie: {len(combined_data)} pojazd√≥w"
                else:
                    msg = f"‚úÖ Znaleziono {len(results['data'])} pojazd√≥w (Batch #{current_batch_id})"
                
                st.session_state.vehicles_data = results
                st.session_state.search_params = {
                    'voiv': selected_voiv,
                    'date_from': date_from,
                    'date_to': date_to,
                    'brand': brand_search,
                    'model': model_search
                }
                
                if brand_search:
                    msg += f" marki {brand_search}"
                if model_search:
                    msg += f" model {model_search}"
                st.success(msg + "!")

# WY≈öWIETLANIE WYNIK√ìW
if st.session_state.vehicles_data:
    data = st.session_state.vehicles_data
    params = st.session_state.search_params
    
    st.markdown("---")
    st.markdown("## üìä Wyniki wyszukiwania")
    
    # Konwersja do DataFrame aby sprawdziƒá batche
    df_temp = api.vehicles_to_dataframe(data)
    
    # Sprawd≈∫ czy sƒÖ r√≥≈ºne batche
    if '_batch_id' in df_temp.columns and df_temp['_batch_id'].nunique() > 1:
        # Poka≈º statystyki per batch
        st.markdown("### üì¶ Podsumowanie wyszukiwa≈Ñ")
        
        batch_ids = sorted(df_temp['_batch_id'].unique())
        cols = st.columns(min(len(batch_ids), 4))
        
        for idx, batch_id in enumerate(batch_ids):
            with cols[idx % 4]:
                batch_data = df_temp[df_temp['_batch_id'] == batch_id]
                st.metric(
                    f"Zapytanie #{batch_id}",
                    f"{len(batch_data)} pojazd√≥w",
                    delta=None
                )
        
        st.info(f"**≈ÅƒÖcznie:** {len(df_temp)} pojazd√≥w z {len(batch_ids)} zapyta≈Ñ")
    else:
        # Pojedyncze wyszukiwanie - stara wersja
        info_text = f"""
        **Wojew√≥dztwo:** {params['voiv']}  
        **Okres:** {params['date_from'].strftime('%Y-%m-%d')} - {params['date_to'].strftime('%Y-%m-%d')}"""
        
        if params.get('brand'):
            info_text += f"  \n**Marka:** {params['brand']}"
        if params.get('model'):
            info_text += f"  \n**Model:** {params['model']}"
        
        info_text += f"  \n**Liczba pojazd√≥w:** {len(data['data'])}"
        
        st.info(info_text)
    
    if len(data['data']) == 0:
        st.warning("Nie znaleziono pojazd√≥w dla wybranych kryteri√≥w.")
    else:
        # Konwersja do DataFrame
        df = api.vehicles_to_dataframe(data)
        
        if df.empty:
            st.warning("Nie mo≈ºna przetworzyƒá danych.")
        else:
            # FILTRY I SORTOWANIE - DYNAMICZNE
            st.markdown("### üîç Filtruj i sortuj wyniki")
            
            # Automatyczne wykrywanie typ√≥w kolumn
            # Wyklucz tylko _batch_id i id
            excluded_cols = {'id', '_batch_id'}
            
            categorical_cols = []
            numeric_cols = []
            date_cols = []
            all_cols = []
            
            for col in df.columns:
                if col in excluded_cols:
                    continue
                
                all_cols.append(col)
                    
                # Kolumny numeryczne
                if pd.api.types.is_numeric_dtype(df[col]):
                    numeric_cols.append(col)
                # Kolumny z datami
                elif 'data' in col.lower() or 'date' in col.lower():
                    date_cols.append(col)
                # Kolumny kategoryczne
                elif df[col].nunique() < 200:  # Zwiƒôkszony limit
                    categorical_cols.append(col)
                else:
                    # Pozosta≈Çe kolumny traktuj jako tekst
                    categorical_cols.append(col)
            
            # Expandable advanced filters
            with st.expander("üéõÔ∏è Filtry dynamiczne", expanded=False):
                # Wyb√≥r kolumn do filtrowania
                st.markdown("**Wybierz kolumny do filtrowania:**")
                available_options = all_cols  # Wszystkie kolumny dostƒôpne
                cols_to_filter = st.multiselect(
                    "Kolumny",
                    options=available_options,
                    default=[c for c in ['rok-produkcji', 'rodzaj-pojazdu', 'rodzaj-paliwa'] if c in available_options][:3],
                    key="filter_cols_select"
                )
                
                if cols_to_filter:
                    st.markdown("---")
                    filter_col1, filter_col2 = st.columns(2)
                    
                    filters_applied = {}
                    col_idx = 0
                    
                    for col in cols_to_filter:
                        target_col = filter_col1 if col_idx % 2 == 0 else filter_col2
                        
                        with target_col:
                            if col in categorical_cols:
                                # Filtr kategoryczny
                                unique_vals = sorted(df[col].dropna().unique().tolist())
                                if len(unique_vals) > 0:
                                    selected = st.multiselect(
                                        f"üìå {col}",
                                        options=unique_vals,
                                        default=None,
                                        key=f"cat_filter_{col}"
                                    )
                                    if selected:
                                        filters_applied[col] = ('categorical', selected)
                            
                            elif col in numeric_cols:
                                # Filtr numeryczny (slider) - u≈ºywamy integer√≥w
                                vals = df[col].dropna()
                                if len(vals) > 0:
                                    try:
                                        min_val = int(vals.min())
                                        max_val = int(vals.max())
                                        if min_val != max_val:
                                            selected_range = st.slider(
                                                f"üî¢ {col}",
                                                min_value=min_val,
                                                max_value=max_val,
                                                value=(min_val, max_val),
                                                step=1,
                                                key=f"num_filter_{col}"
                                            )
                                            if selected_range != (min_val, max_val):
                                                filters_applied[col] = ('numeric', selected_range)
                                    except:
                                        pass
                        
                        col_idx += 1
                    
                    # Przycisk reset filtr√≥w
                    if st.button("üîÑ Resetuj filtry", key="reset_filters_btn"):
                        st.rerun()
            
            # Sortowanie
            sort_col1, sort_col2, sort_col3 = st.columns([2, 2, 1])
            
            with sort_col1:
                sort_column = st.selectbox(
                    "Sortuj wed≈Çug",
                    options=['Brak sortowania'] + list(df.columns),
                    key="sort_col"
                )
            
            with sort_col2:
                if sort_column != 'Brak sortowania':
                    sort_order = st.radio(
                        "Kierunek",
                        options=['RosnƒÖco ‚¨ÜÔ∏è', 'MalejƒÖco ‚¨áÔ∏è'],
                        horizontal=True,
                        key="sort_order"
                    )
                else:
                    sort_order = 'RosnƒÖco ‚¨ÜÔ∏è'
            
            with sort_col3:
                st.metric("Rekord√≥w", len(df))
            
            # Zastosuj filtry dynamicznie
            df_filtered = df.copy()
            
            if 'filters_applied' in locals():
                for col, (filter_type, filter_value) in filters_applied.items():
                    if filter_type == 'categorical':
                        df_filtered = df_filtered[df_filtered[col].isin(filter_value)]
                    elif filter_type == 'numeric':
                        df_filtered = df_filtered[
                            (df_filtered[col] >= filter_value[0]) &
                            (df_filtered[col] <= filter_value[1])
                        ]
            
            # Zastosuj sortowanie
            if sort_column != 'Brak sortowania':
                ascending = (sort_order == 'RosnƒÖco ‚¨ÜÔ∏è')
                try:
                    df_filtered = df_filtered.sort_values(by=sort_column, ascending=ascending)
                except:
                    pass
            
            # Statystyki
            st.markdown("### üìà Statystyki")
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                st.metric("Po filtrach", len(df_filtered), delta=f"{len(df_filtered)-len(df)}")
            with col2:
                st.metric("Wszystkich", len(df))
            with col3:
                st.metric("Unikalne marki", df_filtered['marka'].nunique())
            with col4:
                if 'rok-produkcji' in df_filtered.columns:
                    years_numeric = pd.to_numeric(df_filtered['rok-produkcji'], errors='coerce')
                    avg_year = int(years_numeric.mean()) if not years_numeric.isna().all() else 0
                    st.metric("≈öredni rok prod.", avg_year)
                else:
                    st.metric("≈öredni rok prod.", "N/A")
            with col5:
                filtered_pct = (len(df_filtered) / len(df) * 100) if len(df) > 0 else 0
                st.metric("% pokazanych", f"{filtered_pct:.1f}%")
            
            # Tabela z wyborem kolumn
            st.markdown("### üìã Lista pojazd√≥w")
            
            # Wszystkie dostƒôpne kolumny
            all_available_columns = list(df_filtered.columns)
            
            # Domy≈õlne kolumny do wy≈õwietlenia
            default_columns = ['marka', 'model', 'rok-produkcji', 'rodzaj-pojazdu', 
                             'rodzaj-paliwa', 'pojemnosc-skokowa-silnika', 'masa-wlasna']
            default_display = [col for col in default_columns if col in all_available_columns]
            
            # Multiselect do wyboru kolumn
            st.markdown("**Wyb√≥r kolumn:**")
            col_select1, col_select2 = st.columns([3, 1])
            
            with col_select1:
                selected_columns = st.multiselect(
                    "Kolumny do wy≈õwietlenia:",
                    options=all_available_columns,
                    default=default_display,
                    help="Zaznacz kolumny, kt√≥re chcesz zobaczyƒá w tabeli",
                    label_visibility="collapsed"
                )
            
            with col_select2:
                # Przycisk do zaznaczenia wszystkich
                show_all = st.checkbox("Wszystkie", value=False)
                if show_all:
                    selected_columns = all_available_columns
            
            if not selected_columns:
                st.warning("‚ö†Ô∏è Wybierz przynajmniej jednƒÖ kolumnƒô do wy≈õwietlenia")
            else:
                # Info o sortowaniu w tabeli
                st.info("üí° Kliknij nag≈Ç√≥wek kolumny w tabeli aby posortowaƒá. Pierwsze klikniƒôcie - sortowanie rosnƒÖco, drugie klikniƒôcie - sortowanie malejƒÖco.")
                
                # Tabela z mo≈ºliwo≈õciƒÖ sortowania
                st.dataframe(
                    df_filtered[selected_columns],
                    use_container_width=True,
                    height=400,
                    hide_index=False
                )
            
            # Wizualizacje z dynamicznym wyborem kolumn
            if len(df_filtered) > 0:
                st.markdown("### üìä Wizualizacje")
                
                # Wyb√≥r typu wykresu i kolumn
                viz_col1, viz_col2, viz_col3 = st.columns([2, 2, 2])
                
                with viz_col1:
                    chart_type = st.selectbox(
                        "Typ wykresu",
                        ["S≈Çupkowy (Bar)", "Ko≈Çowy (Pie)", "Histogram", "Scatter", "Box Plot"],
                        help="Wybierz typ wizualizacji"
                    )
                
                # Kolumny kategoryczne i numeryczne
                categorical_cols = [col for col in df_filtered.columns 
                                  if df_filtered[col].dtype == 'object' or df_filtered[col].nunique() < 50]
                numeric_cols = [col for col in df_filtered.columns 
                              if pd.api.types.is_numeric_dtype(df_filtered[col])]
                
                with viz_col2:
                    if chart_type in ["S≈Çupkowy (Bar)", "Ko≈Çowy (Pie)"]:
                        x_column = st.selectbox(
                            "Kolumna do analizy",
                            categorical_cols,
                            index=categorical_cols.index('marka') if 'marka' in categorical_cols else 0,
                            help="Wybierz kolumnƒô kategorycznƒÖ"
                        )
                    elif chart_type == "Histogram":
                        x_column = st.selectbox(
                            "Kolumna do analizy",
                            numeric_cols,
                            index=numeric_cols.index('rok-produkcji') if 'rok-produkcji' in numeric_cols else 0,
                            help="Wybierz kolumnƒô numerycznƒÖ"
                        )
                    elif chart_type == "Scatter":
                        x_column = st.selectbox(
                            "O≈õ X",
                            numeric_cols,
                            help="Wybierz kolumnƒô dla osi X"
                        )
                    else:  # Box Plot
                        x_column = st.selectbox(
                            "Kategoria (X)",
                            categorical_cols,
                            help="Wybierz kolumnƒô kategorycznƒÖ"
                        )
                
                with viz_col3:
                    if chart_type == "S≈Çupkowy (Bar)":
                        top_n = st.slider("Poka≈º top", 5, 50, 15, help="Ile pozycji pokazaƒá")
                    elif chart_type == "Scatter":
                        y_column = st.selectbox(
                            "O≈õ Y",
                            numeric_cols,
                            index=1 if len(numeric_cols) > 1 else 0,
                            help="Wybierz kolumnƒô dla osi Y"
                        )
                    elif chart_type == "Box Plot":
                        y_column = st.selectbox(
                            "Warto≈õƒá (Y)",
                            numeric_cols,
                            help="Wybierz kolumnƒô numerycznƒÖ"
                        )
                
                # Sprawd≈∫ czy sƒÖ r√≥≈ºne batche (dla r√≥≈ºnych kolor√≥w)
                has_batch = '_batch_id' in df_filtered.columns and df_filtered['_batch_id'].nunique() > 1
                color_col = '_batch_id' if has_batch else None
                
                if has_batch:
                    # Konwertuj _batch_id na string dla lepszych legend
                    df_filtered['_batch_id'] = df_filtered['_batch_id'].astype(str)
                    df_filtered['_batch_id'] = 'Zapytanie #' + df_filtered['_batch_id']
                
                # Generowanie wykresu
                try:
                    if chart_type == "S≈Çupkowy (Bar)":
                        if has_batch:
                            # Grupuj po x_column i _batch_id
                            df_grouped = df_filtered.groupby([x_column, '_batch_id']).size().reset_index(name='count')
                            df_grouped = df_grouped.sort_values('count', ascending=True)
                            fig = px.bar(
                                df_grouped.tail(top_n * 2),  # Wiƒôcej dla wielu batchy
                                y=x_column,
                                x='count',
                                color='_batch_id',
                                orientation='h',
                                labels={'count': 'Liczba', x_column: x_column},
                                title=f"Top {top_n}: {x_column} (kolorowane wed≈Çug ≈∫r√≥d≈Ça)"
                            )
                        else:
                            value_counts = df_filtered[x_column].value_counts().head(top_n)
                            fig = px.bar(
                                x=value_counts.values,
                                y=value_counts.index,
                                orientation='h',
                                labels={'x': 'Liczba', 'y': x_column},
                                title=f"Top {top_n}: {x_column}"
                            )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    elif chart_type == "Ko≈Çowy (Pie)":
                        value_counts = df_filtered[x_column].value_counts().head(10)
                        fig = px.pie(
                            values=value_counts.values,
                            names=value_counts.index,
                            title=f"Rozk≈Çad: {x_column}"
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    elif chart_type == "Histogram":
                        df_clean = df_filtered[df_filtered[x_column].notna()].copy()
                        fig = px.histogram(
                            df_clean,
                            x=x_column,
                            color=color_col,
                            labels={x_column: x_column},
                            title=f"Histogram: {x_column}" + (" (kolorowane wed≈Çug ≈∫r√≥d≈Ça)" if has_batch else ""),
                            barmode='overlay' if has_batch else 'relative'
                        )
                        if has_batch:
                            fig.update_traces(opacity=0.6)
                        st.plotly_chart(fig, use_container_width=True)
                    
                    elif chart_type == "Scatter":
                        cols_needed = [x_column, y_column]
                        if has_batch:
                            cols_needed.append('_batch_id')
                        df_clean = df_filtered[cols_needed].dropna()
                        fig = px.scatter(
                            df_clean,
                            x=x_column,
                            y=y_column,
                            color=color_col,
                            title=f"Scatter: {x_column} vs {y_column}" + (" (kolorowane wed≈Çug ≈∫r√≥d≈Ça)" if has_batch else ""),
                            opacity=0.6
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    elif chart_type == "Box Plot":
                        cols_needed = [x_column, y_column]
                        if has_batch:
                            cols_needed.append('_batch_id')
                        df_clean = df_filtered[cols_needed].dropna()
                        fig = px.box(
                            df_clean,
                            x=x_column,
                            y=y_column,
                            color=color_col,
                            title=f"Box Plot: {y_column} wed≈Çug {x_column}" + (" (kolorowane wed≈Çug ≈∫r√≥d≈Ça)" if has_batch else "")
                        )
                        st.plotly_chart(fig, use_container_width=True)
                
                except Exception as e:
                    st.error(f"B≈ÇƒÖd generowania wykresu: {str(e)}")
                    st.info("Spr√≥buj wybraƒá inne kolumny lub typ wykresu")
            
            # Eksport
            st.markdown("### üíæ Eksport danych")
            csv = df_filtered.to_csv(index=False).encode('utf-8')
            st.download_button(
                label="üì• Pobierz wyniki jako CSV",
                data=csv,
                file_name=f"cepik_{params['voiv'].split()[0]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )

else:
    # Ekran powitalny
    st.markdown("""
    ## Witaj w aplikacji BRONA! üëã
    
    ### Jak korzystaƒá:
    
    1. **Wybierz wojew√≥dztwo** w panelu po lewej (domy≈õlnie: wszystkie)
    2. **Wybierz zakres dat** pierwszej rejestracji (u≈ºyj przycisk√≥w skr√≥tu)
    3. **Ustaw filtry** - marka, model, rok produkcji, rodzaj pojazdu
    4. **Kliknij "üîç Wyszukaj pojazdy"** aby pobraƒá dane z API CEPiK
    5. **Analizuj wyniki** - filtruj, sortuj, generuj wykresy
    6. **Eksportuj** dane do pliku CSV
    
    ### Wa≈ºne informacje:
    
    - ‚è±Ô∏è Pobieranie danych dla wszystkich wojew√≥dztw mo≈ºe potrwaƒá kilka minut
    - üìä Aplikacja automatycznie pobiera wszystkie strony wynik√≥w (bez limitu)
    - üîç Mo≈ºesz ≈ÇƒÖczyƒá wyniki z wielu zapyta≈Ñ
    - üíæ Pobrane dane pozostajƒÖ w sesji
    - üìà Wykresy automatycznie pokazujƒÖ dane z r√≥≈ºnych zapyta≈Ñ osobnymi kolorami
    
    ### ≈πr√≥d≈Ço danych:
    
    [API CEPiK](https://api.cepik.gov.pl/) - Centralna Ewidencja Pojazd√≥w i Kierowc√≥w
    """)

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center'>
        <p><strong>BRONA - Bie≈ºƒÖce Raporty O Nabytych Autach</strong></p>
        <p>Dane pochodzƒÖ z Centralnej Ewidencji Pojazd√≥w i Kierowc√≥w (CEPiK)</p>
        <p>Aplikacja stworzona z wykorzystaniem Streamlit | ¬© 2025 | v2.3</p>
    </div>
    """,
    unsafe_allow_html=True
)
